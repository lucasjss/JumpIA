"""
Servi√ßo de integra√ß√£o com Google Gemini API
"""
import google.generativeai as genai
import logging
import json
from typing import Dict, Any, List, Optional

from app.config import settings

logger = logging.getLogger(__name__)


class GeminiService:
    """Servi√ßo para intera√ß√£o com Gemini API"""
    
    def __init__(self):
        """Inicializa o servi√ßo Gemini"""
        if not settings.GEMINI_API_KEY:
            logger.warning("GEMINI_API_KEY n√£o configurada!")
            self.model = None
            return
        
        try:
            genai.configure(api_key=settings.GEMINI_API_KEY)
            self.model = genai.GenerativeModel(settings.GEMINI_MODEL)
            logger.info(f"‚úÖ Gemini API inicializada com modelo: {settings.GEMINI_MODEL}")
        except Exception as e:
            logger.error(f"Erro ao inicializar Gemini API: {e}")
            self.model = None
    
    async def analyze_content(self, content: str, language: str = "pt") -> Dict[str, Any]:
        """
        Analisa o conte√∫do usando Gemini para fact-checking
        
        Args:
            content: Texto a ser analisado
            language: Idioma do conte√∫do
            
        Returns:
            Dicion√°rio com an√°lise estruturada
        """
        if not self.model:
            raise Exception("Gemini API n√£o est√° configurada")
        
        try:
            prompt = self._build_factcheck_prompt(content, language)
            
            logger.info("ü§ñ Enviando requisi√ß√£o para Gemini API...")
            response = self.model.generate_content(prompt)
            
            # Extrair e parsear resposta
            result = self._parse_gemini_response(response.text)
            logger.info("‚úÖ An√°lise do Gemini conclu√≠da")
            
            return result
            
        except Exception as e:
            logger.error(f"Erro ao analisar conte√∫do com Gemini: {e}")
            raise Exception(f"Erro na an√°lise com Gemini: {str(e)}")
    
    def _build_factcheck_prompt(self, content: str, language: str) -> str:
        """Constr√≥i o prompt para fact-checking"""
        
        language_names = {
            "pt": "portugu√™s",
            "en": "ingl√™s",
            "es": "espanhol"
        }
        lang_name = language_names.get(language, "portugu√™s")
        
        prompt = f"""Voc√™ √© um especialista em verifica√ß√£o de fatos. Analise o seguinte conte√∫do em {lang_name} e forne√ßa uma an√°lise detalhada.

CONTE√öDO A SER ANALISADO:
{content}

Por favor, forne√ßa sua an√°lise no seguinte formato JSON:

{{
  "credibility_score": <n√∫mero entre 0 e 1, onde 1 √© totalmente confi√°vel>,
  "overall_credibility": "<alto, m√©dio, baixo, muito baixo ou n√£o verific√°vel>",
  "summary": "<resumo geral da an√°lise em 2-3 frases>",
  "claims": [
    {{
      "text": "<afirma√ß√£o espec√≠fica encontrada>",
      "veracity": "<verdadeiro, falso, parcialmente verdadeiro, n√£o verific√°vel>",
      "confidence": <n√∫mero entre 0 e 1>,
      "explanation": "<explica√ß√£o detalhada da avalia√ß√£o>"
    }}
  ],
  "red_flags": [
    "<lista de sinais de alerta encontrados, como linguagem sensacionalista, falta de fontes, etc>"
  ],
  "recommendations": [
    "<recomenda√ß√µes de fontes confi√°veis para verificar as informa√ß√µes>"
  ]
}}

IMPORTANTE:
- Seja objetivo e baseado em fatos
- Identifique todas as afirma√ß√µes verific√°veis
- Aponte inconsist√™ncias l√≥gicas ou falta de evid√™ncias
- Considere o contexto e nuances
- Responda APENAS com o JSON, sem texto adicional
"""
        return prompt
    
    def _parse_gemini_response(self, response_text: str) -> Dict[str, Any]:
        """
        Parseia a resposta do Gemini
        
        Args:
            response_text: Texto da resposta do Gemini
            
        Returns:
            Dicion√°rio com dados estruturados
        """
        try:
            # Tentar extrair JSON da resposta
            # Remover poss√≠veis markdown code blocks
            text = response_text.strip()
            if text.startswith("```json"):
                text = text[7:]
            if text.startswith("```"):
                text = text[3:]
            if text.endswith("```"):
                text = text[:-3]
            text = text.strip()
            
            # Parsear JSON
            result = json.loads(text)
            
            # Validar campos essenciais
            if "credibility_score" not in result:
                result["credibility_score"] = 0.5
            if "overall_credibility" not in result:
                result["overall_credibility"] = "medium"
            if "summary" not in result:
                result["summary"] = "An√°lise realizada com sucesso."
            if "claims" not in result:
                result["claims"] = []
            if "red_flags" not in result:
                result["red_flags"] = []
            if "recommendations" not in result:
                result["recommendations"] = []
            
            return result
            
        except json.JSONDecodeError as e:
            logger.error(f"Erro ao parsear resposta JSON do Gemini: {e}")
            logger.debug(f"Resposta original: {response_text}")
            
            # Retornar an√°lise b√°sica em caso de erro
            return {
                "credibility_score": 0.5,
                "overall_credibility": "medium",
                "summary": "N√£o foi poss√≠vel realizar an√°lise estruturada completa.",
                "claims": [],
                "red_flags": ["Erro ao processar resposta da IA"],
                "recommendations": []
            }
    
    async def extract_claims(self, content: str) -> List[str]:
        """
        Extrai afirma√ß√µes espec√≠ficas do conte√∫do
        
        Args:
            content: Texto a ser analisado
            
        Returns:
            Lista de afirma√ß√µes encontradas
        """
        if not self.model:
            raise Exception("Gemini API n√£o est√° configurada")
        
        try:
            prompt = f"""Extraia todas as afirma√ß√µes verific√°veis do seguinte texto. 
Retorne apenas uma lista JSON de strings, sem explica√ß√µes adicionais.

TEXTO:
{content}

Formato esperado: ["afirma√ß√£o 1", "afirma√ß√£o 2", ...]
"""
            
            response = self.model.generate_content(prompt)
            
            # Parsear resposta
            text = response.text.strip()
            if text.startswith("```json"):
                text = text[7:]
            if text.startswith("```"):
                text = text[3:]
            if text.endswith("```"):
                text = text[:-3]
            text = text.strip()
            
            claims = json.loads(text)
            return claims if isinstance(claims, list) else []
            
        except Exception as e:
            logger.error(f"Erro ao extrair afirma√ß√µes: {e}")
            return []
    
    async def check_consistency(self, content: str) -> Dict[str, Any]:
        """
        Verifica consist√™ncia interna do conte√∫do
        
        Args:
            content: Texto a ser analisado
            
        Returns:
            An√°lise de consist√™ncia
        """
        if not self.model:
            raise Exception("Gemini API n√£o est√° configurada")
        
        try:
            prompt = f"""Analise a consist√™ncia l√≥gica e interna do seguinte texto.
Identifique contradi√ß√µes, inconsist√™ncias ou problemas l√≥gicos.

TEXTO:
{content}

Retorne um JSON no formato:
{{
  "is_consistent": <true ou false>,
  "inconsistencies": ["lista de inconsist√™ncias encontradas"],
  "logical_issues": ["problemas l√≥gicos identificados"]
}}
"""
            
            response = self.model.generate_content(prompt)
            
            # Parsear resposta
            text = response.text.strip()
            if text.startswith("```json"):
                text = text[7:]
            if text.startswith("```"):
                text = text[3:]
            if text.endswith("```"):
                text = text[:-3]
            text = text.strip()
            
            result = json.loads(text)
            return result
            
        except Exception as e:
            logger.error(f"Erro ao verificar consist√™ncia: {e}")
            return {
                "is_consistent": True,
                "inconsistencies": [],
                "logical_issues": []
            }


# Inst√¢ncia global do servi√ßo
gemini_service = GeminiService()

